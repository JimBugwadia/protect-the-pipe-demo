apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  annotations:
    cosign.sigstore.dev/message: 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
    cosign.sigstore.dev/signature: MEQCIGW0RJgZl0a9AYTl+m6+OLF8XMG6ZGi+clPWAFulpeABAiBo1Dkap3XyqOLkNbI1RiIIAmP3v6AKG+mvV7PneeQB0Q==
    tekton.dev/categories: Git
    tekton.dev/displayName: git clone
    tekton.dev/pipelines.minVersion: 0.21.0
    tekton.dev/tags: git
  labels:
    app.kubernetes.io/version: "0.4"
  name: git-clone
spec:
  description: |-
    These Tasks are Git tasks to work with repositories used by other tasks in your Pipeline.
    The git-clone Task will clone a repo from the provided url into the output Workspace. By default the repo will be cloned into the root of your Workspace. You can clone into a subdirectory by setting this Task's subdirectory param. This Task also supports sparse checkouts. To perform a sparse checkout, pass a list of comma separated directory patterns to this Task's sparseCheckoutDirectories param.
  params:
  - description: Repository URL to clone from.
    name: url
    type: string
  - default: ""
    description: Revision to checkout. (branch, tag, sha, ref, etc...)
    name: revision
    type: string
  - default: ""
    description: Refspec to fetch before checking out revision.
    name: refspec
  - default: "true"
    description: Initialize and fetch git submodules.
    name: submodules
    type: string
  - default: "1"
    description: Perform a shallow clone, fetching only the most recent N commits.
    name: depth
    type: string
  - default: "true"
    description: Set the `http.sslVerify` global git config. Setting this to `false`
      is not advised unless you are sure that you trust your git remote.
    name: sslVerify
    type: string
  - default: ""
    description: Subdirectory inside the `output` Workspace to clone the repo into.
    name: subdirectory
    type: string
  - default: ""
    description: Define the directory patterns to match or exclude when performing
      a sparse checkout.
    name: sparseCheckoutDirectories
    type: string
  - default: "true"
    description: Clean out the contents of the destination directory if it already
      exists before cloning.
    name: deleteExisting
    type: string
  - default: ""
    description: HTTP proxy server for non-SSL requests.
    name: httpProxy
    type: string
  - default: ""
    description: HTTPS proxy server for SSL requests.
    name: httpsProxy
    type: string
  - default: ""
    description: Opt out of proxying HTTP/HTTPS requests.
    name: noProxy
    type: string
  - default: "true"
    description: Log the commands that are executed during `git-clone`'s operation.
    name: verbose
    type: string
  - default: gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/git-init:v0.21.0
    description: The image providing the git-init binary that this Task runs.
    name: gitInitImage
    type: string
  - default: /tekton/home
    description: |
      Absolute path to the user's home directory. Set this explicitly if you are running the image as a non-root user or have overridden
      the gitInitImage param with an image containing custom user configuration.
    name: userHome
    type: string
  results:
  - description: The precise commit SHA that was fetched by this Task.
    name: commit
  - description: The precise URL that was fetched by this Task.
    name: url
  steps:
  - env:
    - name: HOME
      value: $(params.userHome)
    - name: PARAM_URL
      value: $(params.url)
    - name: PARAM_REVISION
      value: $(params.revision)
    - name: PARAM_REFSPEC
      value: $(params.refspec)
    - name: PARAM_SUBMODULES
      value: $(params.submodules)
    - name: PARAM_DEPTH
      value: $(params.depth)
    - name: PARAM_SSL_VERIFY
      value: $(params.sslVerify)
    - name: PARAM_SUBDIRECTORY
      value: $(params.subdirectory)
    - name: PARAM_DELETE_EXISTING
      value: $(params.deleteExisting)
    - name: PARAM_HTTP_PROXY
      value: $(params.httpProxy)
    - name: PARAM_HTTPS_PROXY
      value: $(params.httpsProxy)
    - name: PARAM_NO_PROXY
      value: $(params.noProxy)
    - name: PARAM_VERBOSE
      value: $(params.verbose)
    - name: PARAM_SPARSE_CHECKOUT_DIRECTORIES
      value: $(params.sparseCheckoutDirectories)
    - name: PARAM_USER_HOME
      value: $(params.userHome)
    - name: WORKSPACE_OUTPUT_PATH
      value: $(workspaces.output.path)
    - name: WORKSPACE_SSH_DIRECTORY_BOUND
      value: $(workspaces.ssh-directory.bound)
    - name: WORKSPACE_SSH_DIRECTORY_PATH
      value: $(workspaces.ssh-directory.path)
    - name: WORKSPACE_BASIC_AUTH_DIRECTORY_BOUND
      value: $(workspaces.basic-auth.bound)
    - name: WORKSPACE_BASIC_AUTH_DIRECTORY_PATH
      value: $(workspaces.basic-auth.path)
    image: ghcr.io/tap8stry/git-init:v0.21.0
    name: clone
    securityContext:
      runAsUser: 0
      privileged: false
      allowPrivilegeEscalation: false
    script: |
      #!/usr/bin/env sh
      set -eu

      if [ "${PARAM_VERBOSE}" = "true" ] ; then
        set -x
      fi

      if [ "${WORKSPACE_BASIC_AUTH_DIRECTORY_BOUND}" = "true" ] ; then
        cp "${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/.git-credentials" "${PARAM_USER_HOME}/.git-credentials"
        cp "${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/.gitconfig" "${PARAM_USER_HOME}/.gitconfig"
        chmod 400 "${PARAM_USER_HOME}/.git-credentials"
        chmod 400 "${PARAM_USER_HOME}/.gitconfig"
      fi

      if [ "${WORKSPACE_SSH_DIRECTORY_BOUND}" = "true" ] ; then
        cp -R "${WORKSPACE_SSH_DIRECTORY_PATH}" "${PARAM_USER_HOME}"/.ssh
        chmod 700 "${PARAM_USER_HOME}"/.ssh
        chmod -R 400 "${PARAM_USER_HOME}"/.ssh/*
      fi

      CHECKOUT_DIR="${WORKSPACE_OUTPUT_PATH}/${PARAM_SUBDIRECTORY}"

      cleandir() {
        # Delete any existing contents of the repo directory if it exists.
        #
        # We don't just "rm -rf ${CHECKOUT_DIR}" because ${CHECKOUT_DIR} might be "/"
        # or the root of a mounted volume.
        if [ -d "${CHECKOUT_DIR}" ] ; then
          # Delete non-hidden files and directories
          rm -rf "${CHECKOUT_DIR:?}"/*
          # Delete files and directories starting with . but excluding ..
          rm -rf "${CHECKOUT_DIR}"/.[!.]*
          # Delete files and directories starting with .. plus any other character
          rm -rf "${CHECKOUT_DIR}"/..?*
        fi
      }

      if [ "${PARAM_DELETE_EXISTING}" = "true" ] ; then
        cleandir
      fi

      test -z "${PARAM_HTTP_PROXY}" || export HTTP_PROXY="${PARAM_HTTP_PROXY}"
      test -z "${PARAM_HTTPS_PROXY}" || export HTTPS_PROXY="${PARAM_HTTPS_PROXY}"
      test -z "${PARAM_NO_PROXY}" || export NO_PROXY="${PARAM_NO_PROXY}"

      /ko-app/git-init \
        -url="${PARAM_URL}" \
        -revision="${PARAM_REVISION}" \
        -refspec="${PARAM_REFSPEC}" \
        -path="${CHECKOUT_DIR}" \
        -sslVerify="${PARAM_SSL_VERIFY}" \
        -submodules="${PARAM_SUBMODULES}" \
        -depth="${PARAM_DEPTH}" \
        -sparseCheckoutDirectories="${PARAM_SPARSE_CHECKOUT_DIRECTORIES}"
      cd "${CHECKOUT_DIR}"
      RESULT_SHA="$(git rev-parse HEAD)"
      EXIT_CODE="$?"
      if [ "${EXIT_CODE}" != 0 ] ; then
        exit "${EXIT_CODE}"
      fi
      printf "%s" "${RESULT_SHA}" > "$(results.commit.path)"
      printf "%s" "${PARAM_URL}" > "$(results.url.path)"
  workspaces:
  - description: The git repo will be cloned onto the volume backing this Workspace.
    name: output
  - description: |
      A .ssh directory with private key, known_hosts, config, etc. Copied to
      the user's home before git commands are executed. Used to authenticate
      with the git remote when performing the clone. Binding a Secret to this
      Workspace is strongly recommended over other volume types.
    name: ssh-directory
    optional: true
  - description: |
      A Workspace containing a .gitconfig and .git-credentials file. These
      will be copied to the user's home before any git commands are run. Any
      other files in this Workspace are ignored. It is strongly recommended
      to use ssh-directory over basic-auth whenever possible and to bind a
      Secret to this Workspace over other volume types.
    name: basic-auth
    optional: true
